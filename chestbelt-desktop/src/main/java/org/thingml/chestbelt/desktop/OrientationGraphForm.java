/**
 * Copyright (C) 2012 SINTEF <franck.fleurey@sintef.no>
 *
 * Licensed under the GNU LESSER GENERAL PUBLIC LICENSE, Version 3, 29 June 2007;
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * 	http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ECGGraphForm.java
 *
 * Created on 1 juil. 2012, 16:48:35
 */
package org.thingml.chestbelt.desktop;

import org.thingml.chestbelt.driver.ChestBelt;
import org.thingml.chestbelt.driver.ChestBeltListener;
import java.awt.Color;
import org.thingml.rtcharts.swing.*;
import static java.lang.Math.atan2;
import static java.lang.Math.round;
import static java.lang.Math.sqrt;

/**
 *
 * @author franck
 */
public class OrientationGraphForm extends javax.swing.JFrame implements ChestBeltListener, OrientationCalculatorListener {

    protected static final Color OCOLOR = new java.awt.Color(255, 153, 0);
    protected static final int XMINOR = 50;
    protected static final int YMINOR = 30;
    
    
    protected GraphBuffer xbuffer = new GraphBuffer(200);
    protected GraphBuffer ybuffer = new GraphBuffer(200);
    protected GraphBuffer zbuffer = new GraphBuffer(200);
    
    //private int longitudinalAccelerationComponent; 
    //private int lateralAccelerationComponent; 
    //private int verticalAccelerationComponent; 
    
    protected ChestBelt belt;
    protected OrientationCalculator orientationCalculator;    
    
    public OrientationGraphForm(ChestBelt b, OrientationCalculator orientationCalculator) {
        //this.belt = b;
        //if (b != null) b.addChestBeltListener(this);
        this.orientationCalculator = orientationCalculator;
        orientationCalculator.addOrientationCalculatorListener(this);
        initComponents();
        ((GraphPanel)jPanel1).start();
        ((GraphPanel)jPanel2).start();
        ((GraphPanel)jPanel4).start();
        
      //  longitudinalAccelerationComponent = 0;
       // lateralAccelerationComponent = 0;
        //verticalAccelerationComponent = 0;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new LineGraphPanel(xbuffer, "rotation around longitudinal axis (deg)", -180, 180, YMINOR, XMINOR, OCOLOR);
        jPanel2 = new LineGraphPanel(ybuffer, "rotation around lateral axis (deg)", -180, 180, YMINOR, XMINOR, OCOLOR);
        jPanel4 = new LineGraphPanel(zbuffer, "rotation z (deg)", -180, 180, YMINOR, XMINOR, OCOLOR);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("ChestBelt Heart Rate and ECG Graphs");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                OrientationGraphForm.this.windowClosed(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.PAGE_AXIS));
        getContentPane().add(jPanel1);
        getContentPane().add(jPanel2);
        getContentPane().add(jPanel4);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void windowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowClosed
    if (belt != null) belt.removeChestBeltListener(this);
    ((GraphPanel)jPanel1).stop();
    ((GraphPanel)jPanel2).stop();
    ((GraphPanel)jPanel4).stop();
}//GEN-LAST:event_windowClosed

    
    
    @Override
    public void cUSerialNumber(long value, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void cUFWRevision(String value, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void batteryStatus(int value, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void indication(int value, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void status(int value, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void messageOverrun(int value, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void referenceClockTime(long value, boolean seconds) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void fullClockTimeSync(long value, boolean seconds) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void heartRate(int value, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void heartRateConfidence(int value, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void eCGData(int value) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void eCGSignalQuality(int value, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void eCGRaw(int value, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void gyroPitch(int value, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void gyroRoll(int value, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void gyroYaw(int value, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void accLateral(int value, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void accLongitudinal(int value, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet.");
        
    }

    @Override
    public void accVertical(int value, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet.");
        
    }

    @Override
    public void rawActivityLevel(int value, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void combinedIMU(int ax, int ay, int az, int gx, int gy, int gz, int timestamp) {

    }

    @Override
    public void skinTemperature(int value, int timestamp) {
        //throw new UnsupportedOperationException("Not supported yet.");
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    // End of variables declaration//GEN-END:variables

    @Override
    public void connectionLost() {
        
    }

    @Override
    public void eMGData(int value) {
        
    }

    @Override
    public void eMGSignalQuality(int value, int timestamp) {
        
    }

    @Override
    public void eMGRaw(int value, int timestamp) {
        
    }

    @Override
    public void eMGRMS(int channelA, int channelB, int timestamp) {
        
    }
    @Override
    public void referenceClockTimeSync(int timeSyncSeqNum, long value) {
        
    }

    @Override
    public void orientation(int[] orientationArray) {
        int phiDeg;
        int rhoDeg;
        int thetaDeg;
        phiDeg = orientationArray[0];
        rhoDeg = orientationArray[1];
        thetaDeg = orientationArray[2];
        
        
        xbuffer.insertData(phiDeg);
        ybuffer.insertData(rhoDeg);
        zbuffer.insertData(thetaDeg);
    }
    
    
}
